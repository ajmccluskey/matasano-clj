(ns matasano-clj.xor-cipher
  (:require [matasano-clj.helpers :as h]
            [matasano-clj.letter-frequency :as lf]))

(defn decipher-with-single-byte-xor-key [s key-byte]
  (h/fixed-xor (h/hex-string-to-bytes s) (repeat key-byte)))

(defn decipher-with-single-byte-xor-key-readable [s key-byte]
  "Return a string of readable characters after deciphering s with key-byte"
  (let [plain-bytes (decipher-with-single-byte-xor-key s key-byte)
        plain-chars (map h/char-from-byte plain-bytes)]
    (apply str plain-chars)))

(defn map-single-byte-keys [s coll]
  "Maps each key in coll to the plain text generated by decrypting s with that
  key"
  (let [key-plain-pairs (map #(list % (decipher-with-single-byte-xor-key-readable s %)) coll)]
    (reduce #(assoc %1 (first %2) (second %2)) {} key-plain-pairs)))

(defn find-best-single-byte-key [s coll]
  "Tries all keys in coll as a single byte key, scores the plain texts using
  letter frequency, and returns the best scoring one"
  (let [plains (map-single-byte-keys s coll)
        score-list (map #(list (key %) (lf/score-string (val %) lf/english-frequencies)) plains)
        score-map (apply hash-map (flatten score-list))
        min-score (apply min (vals score-map))]
    (map first (filter #(= (val %) min-score) score-map))))

(defn find-most-likely-plain-texts [s]
  (let [best-keys (find-best-single-byte-key s h/all-bytes)]
    (map-single-byte-keys s best-keys)))
